<?php

namespace ModuleGestionBundle\Repository;

use Doctrine\ORM\QueryBuilder;

/**
 * ExpositionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExpositionRepository extends \Doctrine\ORM\EntityRepository
{

	public function findAllCurrent(){

		$dateJour = date_format(new \Datetime(),'Y-m-d');

		$parameters1 = array(
			'dateJour' => $dateJour
				);

		// On récupère la prochaine exposition
		$query = $this->_em->createQuery('
			SELECT ex 
			FROM ModuleGestionBundle:Exposition ex
			WHERE ex.dateHeureDebutExposition > :dateJour
			ORDER BY ex.dateHeureDebutExposition ASC
		')->setParameters($parameters1)
		->setMaxResults(1);

		if(!empty($query->getResult()))
		{
			// Date de début de la prochaine exposition
			$dateDebExpo = $query->getResult()[0]->getDateHeureDebutExposition();
			// Date 7 jours avant la prochaine exposition
			$dateDebExpoSub = date_format(date_sub($dateDebExpo, date_interval_create_from_date_string('7 days')),'Y-m-d');
			// On récupère l'id de l'exposition
			$id = $query->getResult()[0]->getId();

			// Puis on compare sa date de début retrancher de 7 jours avec la date du jour
			if($dateDebExpoSub <= $dateJour){

				$parameters2 = array(
				'deliver' => 'Livré',
				'id'      => $id
				);

				$query = $this->_em->createQuery('
					SELECT ex, o, e
					FROM ModuleGestionBundle:Exposition ex
					INNER JOIN ex.emplacements e
					INNER JOIN e.oeuvre o
					WHERE e.etat != :deliver
					AND ex.id = :id
				')->setParameters($parameters2);

				return $query->getResult();
			}
			return;
		}
		return;
	}

}
